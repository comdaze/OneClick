AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  dynamoDB stream fanout with EventBridge.

Metadata:
  AWS::ServerlessRepo::Application:
    Name: fanout
    Description: >-
      forwards events from a DynamoDB stream into EventBridge event bus.
      Author: AaRon
      Labels: [serverless, dynamodb, eventbridge]
      SourceCodeUrl: https://github.com/yike5460/SAM
      LicenseUrl: LICENSE
      ReadmeUrl: README.md

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Runtime: python3.8

Parameters:
  DynamoDBStreamArn:
    Type: String
    # Default: "arn:aws:dynamodb:<region>:<account id>:table/<table name>/stream/<timestamp>"
    # Default: "arn:aws-cn:dynamodb:cn-northwest-1:795474696122:table/eventBridge/stream/2020-04-06T14:35:39.992"
    Default: "arn:aws:dynamodb:ap-northeast-1:275937937240:table/HackathonTable/stream/2020-04-24T08:10:33.200"
    Description: Amazon DynamoDB Stream ARN.
  EventBusName:
    Type: String
    Default: "fanoutBus"
    Description: AWS EventBridge Event Bus Name.
  EventBridgeMaxAttempt:
    Type: Number
    Default: 3
    MinValue: 1
    MaxValue: 5
    Description: Max attempt to put events into AWS EventBridge Event Bus. Default is 3.

Resources:
  FanoutLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: fanout.handler
      MemorySize: 768
      Timeout: 360
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt FanoutDLQ.Arn
      # policy arn:aws-cn:iam::aws:policy/AWSXrayWriteOnlyAccess not available in China region
      # Tracing: Active
      Environment:
        Variables:
          DLQ_URL: !Ref FanoutDLQ # FanoutLambda.DestinationQueue
          MAX_ATTEMPT: !Ref EventBridgeMaxAttempt
          EVENT_BUS_NAME: !Ref EventBusName
          EVENT_SOURCE_ARN: !Ref DynamoDBStreamArn
          EVENT_TARGET_LAMBDA_ARN: !GetAtt ConsumerLambda.Arn
      EventInvokeConfig:
          MaximumEventAgeInSeconds: 120
          MaximumRetryAttempts: 1
          DestinationConfig:
            OnFailure:
              Type: SQS
              Destination: !GetAtt FanoutDLQ.Arn
      Policies:
        - AmazonEventBridgeFullAccess
        - SQSSendMessagePolicy:
            QueueName: !GetAtt FanoutDLQ.QueueName
        # refer to https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
        # NOTE EventBridgePutEventsPolicy NOT available in China region
        # - EventBridgePutEventsPolicy:
        #     Description: 'Gives permissions to send events to EventBridge'
        #     EventBusName: !Ref EventBusName
        #     Statement:
        #       - Effect: Allow
        #         Action:
        #           - events: '*'
        #         Resource: '*'
        # there is no similar event below in SAM, we need to updata manually to add List* (AmazonEventBridgeReadOnlyAccess) policies afterwards
        # or just user AWS managed policy like AmazonEventBridgeFullAccess
        # - EventBridgeListEventsPolicy:
        #     Description: 'Gives permissions to EventBridge bus'
        #     Statement:
        #       - Effect: Allow
        #         Action:
        #           - events:ListEventBuses
        #         Resource: arn:aws:events:ap-northeast-1:275937937240:event-bus/fanoutBus
      Events:
        FanoutSource:
          Type: DynamoDB
          Properties:
            Stream: !Ref DynamoDBStreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 10
            MaximumRetryAttempts: 10
            Enabled: true
            DestinationConfig:
              # we creat OnSuccess destination in code directly
              # OnSuccess:
              #   Type: [SQS | SNS | EventBridge | Function]
              #   Destination: ARN of [SQS | SNS | EventBridge | Function]
              OnFailure:
                Type: SQS
                Destination: !GetAtt FanoutDLQ.Arn

  ConsumerLambda: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambdaConsumer.handler
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref EventBusName
          LEADERBOARD_TABLE: !Ref LeaderBoardTable
      MemorySize: 256
      Timeout: 360
      # policy arn:aws-cn:iam::aws:policy/AWSXrayWriteOnlyAccess not available in China region
      # Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LeaderBoardTable
      Events:
        FanoutEventBridge:
          Type: EventBridgeRule
          Description: trigger from centralized eventbridge service
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              source:
              - operations.aws.dynamodb
              # detail-type:
              # - dynamodb

  LeaderGetLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: leaderGet.handler
      Runtime: python3.8
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref LeaderBoardTable
      # For the resource with the logical ID myDynamoDBTable, Ref will return the DynamoDB table name
      Environment:
        Variables:
          TABLE_NAME: !Ref LeaderBoardTable
      MemorySize: 256
      Timeout: 360
      Tracing: Active
      Events:
        LeaderGetAPI:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref LeaderGetApi
            Path: /leaderBoard
            Method: get

  LeaderGetApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: LeaderBoardGet
      StageName: Prod
      # omit in lambda proxy, more on https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'http://localhost:8080'"
        MaxAge: "'600'"
        AllowCredentials: True

# LeaderBoardTable:
  #   # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
  #   Type: AWS::Serverless::SimpleTable
  #   Properties:
  #     TableName: LeaderBoard
  #     PrimaryKey:
  #       Name: Id
  #       Type: String
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 5
  #       WriteCapacityUnits: 5
  #     Tags:
  #       Author: AaRon
  #       AppType: Serverless

  LeaderBoardTable:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: Id
          AttributeType: S
        - AttributeName: metaData
          AttributeType: S
        - AttributeName: projectScore
          AttributeType: S
        # non-key schema not allowed in AttributeDefinitions, add them later directly
        # - AttributeName: userName
        #   AttributeType: S
      KeySchema: 
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: metaData
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "LeaderBoardTable"
      GlobalSecondaryIndexes: 
        - IndexName: scoreIndex
          KeySchema:
            - AttributeName: Id
              KeyType: HASH
            - AttributeName: projectScore
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - metaData
              # - userName
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

  FanoutDLQ:
    Type: "AWS::SQS::Queue"

Outputs:
  FanoutLambdaName:
    Description: "Fanout Lambda Function Name"
    Value: !Ref FanoutLambda
  ConsumerLambdaName:
    Description: "Consumer Lambda Function Name"
    Value: !Ref ConsumerLambda
  FanoutDlqUrl:
    Description: "Fanout DLQ URL"
    Value: !Ref FanoutDLQ
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # LeaderGetApi:
  #   Description: "API Gateway endpoint URL for hack stage for LeaderGet function"
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ServerlessRestApiProdStage}/leaderBoard/"
  LeaderGetApiGw:
      Description: "API Gateway endpoint URL for Leader BoardGet"
      Value: !Sub "https://${LeaderGetApi}.execute-api.${AWS::Region}.amazonaws.com/${LeaderGetApi.Stage}/leaderBoard/"
  LeaderGetLambda:
    Description: "LeaderGetLambda function ARN"
    Value: !GetAtt LeaderGetLambda.Arn
  LeaderGetLambdaIamRole:
    Description: "Implicit IAM Role created for LeaderGetLambda function"
    Value: !GetAtt LeaderGetLambdaRole.Arn